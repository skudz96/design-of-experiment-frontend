"use client";

import Form from "./Components/Form";
import Table from "./Components/Table";
import fastCartesian from "fast-cartesian";
import { useEffect, useState } from "react";

// 1. Create a function named `generateDesignMatrix` that takes in three parameters: `factors`, `levels`, and `halfFactorial`. The function should return an array of arrays.
// 2. The `factors` parameter is an integer that represents the number of factors in the design matrix.
// 3. The `levels` parameter is an integer that represents the number of levels for each factor in the design matrix.
// 4. The `halfFactorial` parameter is a boolean that represents whether the design matrix should be a half-factorial design. If `halfFactorial` is `true`, the final column should be the product of all the other factors. If `halfFactorial` is `false`, the final column should be `1`.
// 5. The function should return an array of arrays representing the design matrix. Each inner array should represent a row in the design matrix, and each element in the inner array should represent a factor level.
// 6. The matrix should be generated by passing the array of arrays to the `fast-cartesian` package. You can install the package using `npm install fast-cartesian`.

/* interface TableProps {
  factors: number;
  levels: number[];
  halfFactorial: boolean;
} */

export default function Home() {
  // Defining state variables for all function parameters
  const [integerValue, setIntegerValue] = useState<number>(0);
  const [booleanValue, setBooleanValue] = useState(false);
  // State variable for converting level input to an array
  const [levels, setLevels] = useState<number[]>([]);

  // update matrix state
  const [matrix, setMatrix] = useState<number[][]>([]);

  /* ATTEMPTING TO INTRODUCE CUSTOM LEVEL NAMING UPDATEABLE FROM TABLE COMPONENT */
  // mapping state for renaming levels
  // passing these to Table component
  const [levelMapping, setLevelMapping] = useState<{ [key: number]: string }>(
    Object.fromEntries(levels.map((level) => [level, level.toString()]))
  );

  // useEffect to update levelMapping when levels change
  // without this, levelMapping state would not update when levels change
  // meaning levelMapping object would not contain the correct keys
  // and hence not render any input fields in table.tsx
  useEffect(() => {
    setLevelMapping(
      Object.fromEntries(levels.map((level) => [level, level.toString()]))
    );
  }, [levels]);

  // defining types of arguments
  // and saying we are expecting a numeric array of arrays as a return
  function generateDesignMatrix(
    factors: number,
    levels: number[],
    halfFactorial: boolean
  ): number[][] {
    // Check if the criteria are met
    if (levels.length > 3 || factors > 6 || factors * levels.length > 15) {
      throw new Error(
        "Error: Exceeds the limit of 3 levels, 6 factors, and 15 repeats."
      );
    }
    let arrays;

    if (halfFactorial) {
      // Create an array with factors - 1 number of elements, each being the 'levels' array
      arrays = Array(factors - 1).fill(levels);
    } else {
      // Create an array with factors number of elements, each being the 'levels' array
      arrays = Array(factors).fill(levels);
    }

    // Use fastCartesian package to generate all possible combinations
    // a bunch of typescript jargon needed to define the type of the matrix
    let matrix: number[][] = fastCartesian(arrays) as number[][];

    if (halfFactorial) {
      // Add the final column to the matrix
      matrix = matrix.map((row: number[]) => [
        ...row,
        row.reduce((acc, cur) => acc * cur, 1),
      ]);
    }

    // returns a numerical array of arrays
    setMatrix(matrix);
    return matrix;
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md mx-auto">
        <h1 className="text-3xl font-semibold text-center text-gray-800 mb-8">
          Data Entry App
        </h1>
        {/* Passing states to the form */}
        <Form
          factor={integerValue}
          setFactors={setIntegerValue}
          levels={levels}
          setLevels={setLevels}
          halfFactorial={booleanValue}
          setHalfFactorial={setBooleanValue}
          generateDesignMatrix={generateDesignMatrix}
        />
      </div>
      <Table
        matrix={matrix}
        levelMapping={levelMapping}
        setLevelMapping={setLevelMapping}
      />
    </main>
  );
}
